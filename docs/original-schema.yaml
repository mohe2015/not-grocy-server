openapi: 3.0.1
info:
  title: not-grocy
  description: ''
  contact:
    email: Moritz.Hedtke@t-online.de
  license:
    name: MIT
    url: https://mit-license.org/
  version: 0.0.1
externalDocs:
  description: Documentation
  url: https://github.com/mohe2015/not-grocy-server/tree/schema-doc/docs
servers:
- url: https://example.org/v1
tags:
- name: users
  description: Everything about your users
  externalDocs:
    description: Find out more
    url: https://example.org
paths:
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  schemas:
    User:
      type: object
      description: users table contains list of all users
      required:
        - username # just a test
      properties:
        id:
          type: integer
          description: primary key
        username:
          type: string
          description: unique
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        password:
          type: string
          format: password
          description: "improvements: rename to password_hash in database"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
        picture_file_name:
          type: string
          nullable: true
    ApiKey:
      type: object
      description: "https://github.com/mistressofjellyfish/not-grocy/blob/vuejs/php/Services/ApiKeyService.php

In the current implementation it seems (GetOrCreateApiKey) like they get reused for different users / are not associated with a user. If this actually happens reusing is not a good idea as you can't revoke single api keys from a specific usage then.
https://github.com/mistressofjellyfish/not-grocy/blob/246c7fcb64d63caf1a4a1e8dafb0308d9fa4264b/php/Controllers/CalendarApiController.php#L57 they're reused for the ical sharing link so you can't revoke access per person you gave the link to. This may not be that important as it's a household management software but still could be better."
      properties:
        id:
          type: integer
          description: "primary key - improvements: ~~remove and make api_key the primary key~~ probably joins are to inefficient then especially as sqlite doesn't have custom datatypes like uuids"
        api_key:
          type: string
          description: unique - the api key to authenticate with.
        user_id:
          type: integer
          description: "references a row in users table? - improvements: make foreign key to users?"
        expires:
          type: string
          format: date-time
          nullable: true
          description: "when the api key expires. By default this is set to a date in 2999. - improvements: could be non-null"
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
