openapi: 3.0.1
info:
  title: not-grocy
  description: ''
  contact:
    email: Moritz.Hedtke@t-online.de
  license:
    name: MIT
    url: https://mit-license.org/
  version: 0.0.1
externalDocs:
  description: Documentation
  url: https://github.com/mohe2015/not-grocy-server/tree/schema-doc/docs
servers:
- url: https://example.org/v1
tags:
- name: users
  description: Everything about your users
  externalDocs:
    description: Find out more
    url: https://example.org
paths:
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  schemas:
    User:
      type: object
      description: users table contains list of all users
      required:
        - username # just a test
      properties:
        id:
          type: integer
          description: primary key
        username:
          type: string
          description: unique
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        password:
          type: string
          format: password
          description: "improvements: rename to password_hash in database"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
        picture_file_name:
          type: string
          nullable: true
    ApiKey:
      type: object
      description: "https://github.com/mistressofjellyfish/not-grocy/blob/vuejs/php/Services/ApiKeyService.php

In the current implementation it seems (GetOrCreateApiKey) like they get reused for different users / are not associated with a user. If this actually happens reusing is not a good idea as you can't revoke single api keys from a specific usage then.
https://github.com/mistressofjellyfish/not-grocy/blob/246c7fcb64d63caf1a4a1e8dafb0308d9fa4264b/php/Controllers/CalendarApiController.php#L57 they're reused for the ical sharing link so you can't revoke access per person you gave the link to. This may not be that important as it's a household management software but still could be better."
      properties:
        id:
          type: integer
          description: "primary key - improvements: ~~remove and make api_key the primary key~~ probably joins are to inefficient then especially as sqlite doesn't have custom datatypes like uuids"
        api_key:
          type: string
          description: unique - the api key to authenticate with.
        user_id:
          type: integer
          description: "references a row in users table? - improvements: make foreign key to users?"
        expires:
          type: string
          format: date-time
          nullable: true
          description: "when the api key expires. By default this is set to a date in 2999. - improvements: could be non-null"
        last_used:
          type: string
          format: date-time
          nullable: true
          description: "improvements: usage unknown - could be non-null if we consider creation a use (which is questionable"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
          default: now
          description: "the time this row was created (usage unknown) - improvements: non-null"
        key_type:
          type: string
          description: "probably what permissions the api key has - improvements: possibly type enum if database support exists

could possibly be unified with the permission system of users - so an api key is a (sub)user or whatever. Maybe this may also be too complicated though."
          enum:
          - default
          - special-purpose-calendar-ical
    Battery:
      type: object
      description: table batteries
      properties:
        id:
          type: integer
          description: primary key
        name:
          type: string
          description: "unique - not sure if uniqueness needs to be enforced - should not matter"
        description:
          type: string
          nullable: true
        used_in:
          type: string
          nullable: true
          description: where the battery is used in
        charge_interval_days:
          type: number
          default: 0
          description: "the interval you want to charge the battery at in days - improvements: depending on what 0 is supposed to mean maybe use null? As in I want this battery tracked when I charge it but I don't have a specific charge cycle."
        row_created_timestamp:
          type: string
          format: date-time
          default: now
        active:
          type: boolean
          description: "whether the battery is still in use"
    BatteryChargeCycle:
      type: object
      description: "table battery_charge_cycles"
      properties:
        id:
          type: integer
          description: "primary key"
        battery_id:
          type: string
          description: "the battery this charge cycle belongs to improvements: should be type integer and foreign key battery(id)"
        tracked_time:
          type: string
          format: date-time
          nullable: true
          description: "the time at which you charged the battery improvements: non-null"
        row_created_timestamp:
          type: string
          format: date-time
          default: now
          description: "improvements: non-null (probably also for the others)."
        undone:
          type: boolean
          description: "whether this charge cycle was undone improvements: think about merging into undone_timestamp and use null instead? / use no timestamp?"
        undone_timestamp:
          type: string
          format: date-time
          nullable: true
          description: "when it was undone"
    Chore:
      type: object
      description: "table chores - for the non-native speakers: [a job or piece of work that is often boring or unpleasant but needs to be done regularly](https://dictionary.cambridge.org/dictionary/english/chore) \
  couldn't the battery handling be merged into this? \
  maybe look at a calendar implementation to find a proper way to implement the recurring things here - maybe another relation is needed for the repetitions - so one chore can be repeated multiple times at different intervals. maybe we could just use some calendar implementation? \
  so my calendar implementation is as follows: \
  repetition_type: never, day, week, month, year \
  repetition_amount: number of that when to repeat \
  for week: weekday \
  for month: day of month or (first/.../last/second-last weekday) but this is probably overkill \
  for year: month and (first/last/second-last weekday) of that month"
      properties:
        id:
          type: integer
          description: primary key
        name:
          type: string
          description: "unique improvements: really needs to be unique?"
        description:
          type: string
          nullable: true
        period_type:
          type: string
          description: "https://github.com/mistressofjellyfish/not-grocy/blob/vuejs/php/Services/ChoresService.php#L12"
          enum:
          - manually
          - dynamic-regular
          - daily
          - weekly
          - monthly
          - yearly
        period_days:
          type: integer
          description: relation to period_type not exactly understood yet
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
          default: now
        period_config:
          type: string
          nullable: true
          description: "probably: comma separated list of weekdays if period_type == weekly"
        track_date_only:
          type: boolean
          description: "whether to only track the date but not the time - improvements: Is this even needed?"
        rollover:
          type: boolean
          description: "New option \"Due date rollover\" per chore which means the chore can never be overdue, the due date will shift forward each day when due - improvements: Is this really needed? What's the intention? (I really wanna know - is it like mow the lawn, well we can just ignore that nobody cares)"
        assignment_type:
          type: string
          nullable: true
          description: "decides who's next doing this chore
random means a random user of the assigned users is chosen

no-assignment means nobody gets assigned

in-alphabetical-order means the next one in the list of assigned users is chosen based on alphabetical order of the names.

who-least-did-first spies the history and gets the person who did it the least times in total past history. details in view chores_execution_users_statistics

https://github.com/mistressofjellyfish/not-grocy/blob/vuejs/php/Services/ChoresService.php#L7 - improvements: for in-alphabetical-order why not simply choose the next one in the list, so not alphabetical (maybe for \"determinism\"?)

for who-least-did-first - this probably doesn't work if you get added later"
          enum:
            - in-alphabetical-order
            - no-assignment
            - random
            - who-least-did-first
        assignment_config:
          type: string
          nullable: true
          description: "comma-separated list of user_id's that can potentially be assigned to this chore.

It seems like null doesn't mean everybody but doesn't work

who-least-did-first seems to not support this."
        next_execution_assigned_to_user_id:
          type: integer
          nullable: true
          description: "the person who has to do this next
it seems like undo doesn't undo this? - improvements: foreign key to users"
        consume_product_on_execution:
          type: boolean
          description: "whether to consume a product on executing this chore improvements: merge into product_id - it being null means false"
        product_id:
          type: integer
          description: "the product to consume on execution - improvements: tinyint -> integer, foreign key to products(id)"
        product_amount:
          type: number
          description: "the amount of the product to consume on execution - improvements: real is an interesting choice (is there not a \"quantum\" unit for everything?)"
        period_interval:
          type: integer
          minimum: 1
          default: 1
          description: "the amount of period_type - what is period_days then? look at https://github.com/mistressofjellyfish/not-grocy/blob/1f1c13dda13ec2a41c047bd16a078315ac9a97a5/js/viewjs/choreform.js and all the views to find out"
        active:
          type: boolean
          description: "whether this chore is active"
    ChoresLogEntry:
      type: object
      description: "table chores_log"
      properties:
        id:
          type: integer
          description: primary key
        chore_id:
          type: integer
          description: "improvements: foreign key chore(id)"
        tracked_time:
          type: string
          format: date-time
          nullable: true
          description: "time when this was done - improvements: non-null"
        done_by_user_id:
          type: integer
          nullable: true
          description: "who did the chore - improvements: foreign key user_id
maybe non-null - somebody must have done it"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
          default: now
        undone:
          type: boolean
        undone_timestamp:
          type: string
          format: date-time
          nullable: true
    Equipment:
      type: object
      description: "some equipment mostly to associate it with an instruction manual.

may be unified with something else if descriptions can contain files (in a rich text field)."
      properties:
        id:
          type: integer
          description: primary key
        name:
          type: string
          description: "unique - improvements: unique really needed?"
        description:
          type: string
          nullable: true
        instruction_manual_file_name:
          type: string
          nullable: true
          description: "file name of the instruction manual

what exactly does file name mean?"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
          default: now
    Location:
      type: object
      properties:
        id:
          type: integer
          description: primary key
        name:
          type: string
          description: unique
        description:
          type: string
          nullable: true
        row_created_timestamp:
          type: string
          format: date-time
          default: now
        is_freezer:
          type: boolean
          description: "interesting - for what is this used?

I realize - food is complicated.

there are different best before dates depending on from where to where you move the food (I think it should only matter to where you move it)

default_best_before_days_after_freezing

default_best_before_days_after_thawing

still lot's of details missing here"
    Meal:
      description: "table meal_plan, repetition planning problems seem similar like for chores / batteries but usually a meal plan is per week / different every day"
      properties:
        id:
          type: integer
          description: primary key
        day:
          type: string
          format: date
          description: "improvements: rename field to date?"
        type:
          type: text
          nullable: true
          description: "type of the entry in the meal plan improvements: crazy and probably stupid idea: why is a product not a recipe with no preparation?"
          enum:
            - recipe
            - product
            - note
        recipe_id:
          type: integer
          nullable: true
          description: "improvements: foreign key to recipes?"
        recipe_servings:
          type: integer
          nullable: true
          description: "number of servings of the recipe"
        note:
          type: string
          nullable: true
          description: "a note (probably only valid when type==note). Generally here are three different types - I know relational databases don't like columns that depend on enums - maybe there is still a better way (e.g (remove type) and allow note always? possibly this is already the case)"
        product_id:
          type: integer
          nullable: true
          description: "improvements: foreign key to products"
        product_amount:
          type: number
          nullable: true
          default: 0
          description: "the amount of the product - interesting that the default here is 0. improvements: merge into recipe_servings?"
        product_qu_id:
          type: integer
          nullable: true
          description: "probably quantity unit id improvements: rename to a more understandable name

foreign key to quantity_units(id)?"
        row_created_timestamp:
          type: string
          format: date-time
          nullable: true
          default: now
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
